{"version":3,"file":"physicsMaterial.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/physicsMaterial.ts"],"names":[],"mappings":"AAGA;;;GAGG;AACH,MAAM,OAAO,eAAe;IAUxB;;;;;;;;;;;OAWG;IACH,YAAY,QAAgB,EAAE,WAAmB,EAAE,KAAY;QArB/D;;WAEG;QACI,gBAAW,GAAQ,SAAS,CAAC;QAmBhC,MAAM,aAAa,GAAG,KAAK,CAAC,gBAAgB,EAAE,CAAC;QAC/C,IAAI,CAAC,aAAa,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QACD,IAAI,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACvE;QACD,MAAM,aAAa,GAAG,aAAa,CAAC,gBAAgB,EAAE,CAAC;QACvD,IAAI,CAAC,aAAa,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,cAAc,GAAG,aAAuC,CAAC;QAC9D,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;;OAOG;IACI,WAAW,CAAC,QAAgB;QAC/B,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED;;;;;;;OAOG;IACI,WAAW;QACd,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;;OAOG;IACI,cAAc,CAAC,WAAmB;QACrC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;OAMG;IACI,cAAc;QACjB,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IAED;;;;;;OAMG;IACI,OAAO;QACV,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;CACJ","sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { IPhysicsEnginePluginV2 } from \"./IPhysicsEnginePlugin\";\r\n\r\n/**\r\n * Physics material class\r\n * Helps setting friction and restitution that are used to compute responding forces in collision response\r\n */\r\nexport class PhysicsMaterial {\r\n    /**\r\n     * V2 Physics plugin private data for a physics material\r\n     */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     * The V2 plugin used to create and manage this Physics Body\r\n     */\r\n    protected _physicsPlugin: IPhysicsEnginePluginV2;\r\n\r\n    /**\r\n     * Constructor of the physics material.\r\n     * @param friction - The friction of the material.\r\n     * @param restitution - The restitution of the material.\r\n     * @param scene - The scene to which the physics engine belongs.\r\n     *\r\n     * This code is useful for initializing the physics material with the\r\n     * given friction, restitution and scene. It also checks if the\r\n     * physics engine and plugin are available and if the plugin version\r\n     * is correct. If all conditions are met, it initializes the material\r\n     * with the physics plugin.\r\n     */\r\n    constructor(friction: number, restitution: number, scene: Scene) {\r\n        const physicsEngine = scene.getPhysicsEngine();\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n        this._physicsPlugin.initMaterial(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the friction of the physics engine.\r\n     * @param friction - The friction to set.\r\n     *\r\n     * This method is useful for setting the friction of the physics engine, which is important for simulating realistic physics.\r\n     * The friction determines how much an object will slow down when it is in contact with another object.\r\n     * This is important for simulating realistic physics, such as when an object slides across a surface.\r\n     */\r\n    public setFriction(friction: number): void {\r\n        this._physicsPlugin.setFriction(this, friction);\r\n    }\r\n\r\n    /**\r\n     * Gets the friction of the physics engine.\r\n     *\r\n     * @returns The friction of the physics engine.\r\n     *\r\n     * This method is useful for getting the friction of the physics engine, which is used to calculate the force of friction between two objects.\r\n     * Knowing the friction of the engine can help to accurately simulate the physical behavior of objects in the engine.\r\n     */\r\n    public getFriction(): number {\r\n        return this._physicsPlugin.getFriction(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the restitution of the physics body.\r\n     * @param restitution A number between 0 and 1 that represents the restitution of the body.\r\n     *\r\n     * This method is useful for setting the restitution of a physics body, which is the amount of energy that is retained after a collision.\r\n     * A restitution of 0 means that no energy is retained, while a restitution of 1 means that all energy is retained.\r\n     * Setting the restitution of a body can help to create realistic physics simulations.\r\n     */\r\n    public setRestitution(restitution: number): void {\r\n        this._physicsPlugin.setRestitution(this, restitution);\r\n    }\r\n\r\n    /**\r\n     * Gets the restitution of the physics engine.\r\n     * @returns The restitution of the physics engine.\r\n     *\r\n     * This method is useful for retrieving the restitution of the physics engine, which is the amount of energy that is preserved after two objects collide.\r\n     * Knowing the restitution of the physics engine can help to accurately simulate the behavior of objects in the physics engine.\r\n     */\r\n    public getRestitution(): number {\r\n        return this._physicsPlugin.getRestitution(this);\r\n    }\r\n\r\n    /**\r\n     * Disposes the material.\r\n     *\r\n     * This method is useful for cleaning up the material when it is no longer needed.\r\n     * It calls the disposeMaterial method of the physics plugin, which is responsible for disposing the material and freeing up any resources associated with it.\r\n     * This ensures that the material is properly disposed of and does not cause any memory leaks.\r\n     */\r\n    public dispose(): void {\r\n        this._physicsPlugin.disposeMaterial(this);\r\n    }\r\n}\r\n"]}