{"version":3,"file":"ssrRenderingPipeline.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/PostProcesses/RenderPipeline/Pipelines/ssrRenderingPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Logger } from \"../../../Misc/logger\";\r\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators\";\r\nimport { Vector3, Matrix, Quaternion, TmpVectors } from \"../../../Maths/math.vector\";\r\nimport type { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { PostProcess } from \"../../postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../postProcessRenderEffect\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { ScreenSpaceReflections2Configuration } from \"../../../Rendering/screenSpaceReflections2Configuration\";\r\nimport type { PrePassRenderer } from \"../../../Rendering/prePassRenderer\";\r\nimport { GeometryBufferRenderer } from \"../../../Rendering/geometryBufferRenderer\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport type { CubeTexture } from \"../../../Materials/Textures/cubeTexture\";\r\nimport { DepthRenderer } from \"../../../Rendering/depthRenderer\";\r\nimport type { ISize } from \"../../../Maths/math.size\";\r\n\r\nimport \"../postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/screenSpaceReflection2.fragment\";\r\nimport \"../../../Shaders/screenSpaceReflection2Blur.fragment\";\r\nimport \"../../../Shaders/screenSpaceReflection2BlurCombiner.fragment\";\r\n\r\nconst trs = Matrix.Compose(new Vector3(0.5, 0.5, 0.5), Quaternion.Identity(), new Vector3(0.5, 0.5, 0.5));\r\nconst trsWebGPU = Matrix.Compose(new Vector3(0.5, 0.5, 1), Quaternion.Identity(), new Vector3(0.5, 0.5, 0));\r\n\r\n/**\r\n * Render pipeline to produce Screen Space Reflections (SSR) effect\r\n *\r\n * References:\r\n *   Screen Space Ray Tracing:\r\n *     - http://casual-effects.blogspot.com/2014/08/screen-space-ray-tracing.html\r\n *     - https://sourceforge.net/p/g3d/code/HEAD/tree/G3D10/data-files/shader/screenSpaceRayTrace.glsl\r\n *     - https://github.com/kode80/kode80SSR\r\n *   SSR:\r\n *     - general tips: https://sakibsaikia.github.io/graphics/2016/12/26/Screen-Space-Reflection-in-Killing-Floor-2.html\r\n *     - computation of blur radius from roughness and distance: https://github.com/godotengine/godot/blob/master/servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl\r\n *     - blur and usage of back depth buffer: https://github.com/kode80/kode80SSR\r\n */\r\nexport class SSRRenderingPipeline extends PostProcessRenderPipeline {\r\n    /**\r\n     * The SSR PostProcess effect id in the pipeline\r\n     */\r\n    public SSRRenderEffect: string = \"SSRRenderEffect\";\r\n    /**\r\n     * The blur PostProcess effect id in the pipeline\r\n     */\r\n    public SSRBlurRenderEffect: string = \"SSRBlurRenderEffect\";\r\n    /**\r\n     * The PostProcess effect id in the pipeline that combines the SSR-Blur output with the original scene color\r\n     */\r\n    public SSRCombineRenderEffect: string = \"SSRCombineRenderEffect\";\r\n\r\n    private _samples = 1;\r\n    /**\r\n     * MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\r\n     */\r\n    public set samples(sampleCount: number) {\r\n        if (this._samples === sampleCount) {\r\n            return;\r\n        }\r\n        this._samples = sampleCount;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    @serialize()\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the maxDistance used to define how far we look for reflection during the ray-marching on the reflected ray (default: 1000).\r\n     * Note that this value is a view (camera) space distance (not pixels!).\r\n     */\r\n    @serialize()\r\n    public maxDistance: number = 1000.0;\r\n    /**\r\n     * Gets or sets the step size used to iterate until the effect finds the color of the reflection's pixel. Should be an integer \\>= 1 as it is the number of pixels we advance at each step (default: 1).\r\n     * Use higher values to improve performances (but at the expense of quality).\r\n     */\r\n    @serialize()\r\n    public step: number = 1.0;\r\n    /**\r\n     * Gets or sets the thickness value used as tolerance when computing the intersection between the reflected ray and the scene (default: 0.5).\r\n     * If setting \"enableAutomaticThicknessComputation\" to true, you can use lower values for \"thickness\" (even 0), as the geometry thickness\r\n     * is automatically computed thank to the regular depth buffer + the backface depth buffer\r\n     */\r\n    @serialize()\r\n    public thickness: number = 0.5;\r\n    /**\r\n     * Gets or sets the current reflection strength. 1.0 is an ideal value but can be increased/decreased for particular results (default: 1).\r\n     */\r\n    @serialize()\r\n    public strength: number = 1;\r\n    /**\r\n     * Gets or sets the falloff exponent used to compute the reflection strength. Higher values lead to fainter reflections (default: 1).\r\n     */\r\n    @serialize()\r\n    public reflectionSpecularFalloffExponent: number = 1;\r\n    /**\r\n     * Maximum number of steps during the ray marching process after which we consider an intersection could not be found (default: 1000)\r\n     */\r\n    @serialize()\r\n    public maxSteps: number = 1000.0;\r\n    /**\r\n     * Gets or sets the factor applied when computing roughness. Default value is 0.2.\r\n     * When blurring based on roughness is enabled (meaning blurDispersionStrength \\> 0), roughnessFactor is used as a global roughness factor applied on all objects.\r\n     * If you want to disable this global roughness set it to 0.\r\n     */\r\n    @serialize()\r\n    public roughnessFactor: number = 0.2;\r\n    /**\r\n     * Number of steps to skip at start when marching the ray to avoid self collisions (default: 1)\r\n     * 1 should normally be a good value, depending on the scene you may need to use a higher value (2 or 3)\r\n     */\r\n    @serialize()\r\n    public selfCollisionNumSkip = 1;\r\n\r\n    @serialize(\"blurDispersionStrength\")\r\n    private _blurDispersionStrength = 1 / 20;\r\n\r\n    /**\r\n     * Gets or sets the blur dispersion strength. Set this value to 0 to disable blurring (default: 0.05)\r\n     * The reflections are blurred based on the distance between the pixel shaded and the reflected pixel: the higher the distance the more blurry the reflection is.\r\n     * blurDispersionStrength allows to increase or decrease this effect.\r\n     */\r\n    public get blurDispersionStrength() {\r\n        return this._blurDispersionStrength;\r\n    }\r\n\r\n    public set blurDispersionStrength(strength: number) {\r\n        if (strength === this._blurDispersionStrength) {\r\n            return;\r\n        }\r\n\r\n        const rebuild = (strength === 0 && this._blurDispersionStrength !== 0) || (strength !== 0 && this._blurDispersionStrength === 0);\r\n\r\n        this._blurDispersionStrength = strength;\r\n\r\n        if (rebuild) {\r\n            this._buildPipeline();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply different weighting when blurring.\r\n     * Must be a value between 2 and 5\r\n     */\r\n    @serialize()\r\n    public blurQuality = 2;\r\n\r\n    @serialize(\"enableSmoothReflections\")\r\n    private _enableSmoothReflections: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets whether or not smoothing reflections is enabled.\r\n     * Enabling smoothing will require more GPU power and can generate a drop in FPS.\r\n     * Note that this setting has no effect if step = 1: it's only used if step \\> 1.\r\n     */\r\n    public get enableSmoothReflections(): boolean {\r\n        return this._enableSmoothReflections;\r\n    }\r\n\r\n    public set enableSmoothReflections(enabled: boolean) {\r\n        if (enabled === this._enableSmoothReflections) {\r\n            return;\r\n        }\r\n\r\n        this._enableSmoothReflections = enabled;\r\n        this._updateEffectDefines();\r\n    }\r\n\r\n    @serialize(\"environmentTexture\")\r\n    private _environmentTexture: Nullable<CubeTexture>;\r\n\r\n    /**\r\n     * Gets or sets the environment cube texture used to define the reflection when the reflected rays of SSR leave the view space or when the maxDistance/maxSteps is reached.\r\n     */\r\n    public get environmentTexture() {\r\n        return this._environmentTexture;\r\n    }\r\n\r\n    public set environmentTexture(texture: Nullable<CubeTexture>) {\r\n        this._environmentTexture = texture;\r\n        this._updateEffectDefines();\r\n    }\r\n\r\n    @serialize(\"environmentTextureIsProbe\")\r\n    private _environmentTextureIsProbe: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets the boolean defining if the environment texture is a standard cubemap (false) or a probe (true). Default value is false.\r\n     * Note: a probe cube texture is treated differently than an ordinary cube texture because the Y axis is reversed.\r\n     */\r\n    public get environmentTextureIsProbe(): boolean {\r\n        return this._environmentTextureIsProbe;\r\n    }\r\n\r\n    public set environmentTextureIsProbe(isProbe: boolean) {\r\n        this._environmentTextureIsProbe = isProbe;\r\n        this._updateEffectDefines();\r\n    }\r\n\r\n    @serialize(\"attenuateScreenBorders\")\r\n    private _attenuateScreenBorders = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the reflections should be attenuated at the screen borders (default: true).\r\n     */\r\n    public get attenuateScreenBorders() {\r\n        return this._attenuateScreenBorders;\r\n    }\r\n\r\n    public set attenuateScreenBorders(attenuate: boolean) {\r\n        if (this._attenuateScreenBorders === attenuate) {\r\n            return;\r\n        }\r\n        this._attenuateScreenBorders = attenuate;\r\n        this._updateEffectDefines();\r\n    }\r\n\r\n    @serialize(\"attenuateIntersectionDistance\")\r\n    private _attenuateIntersectionDistance = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the reflections should be attenuated according to the distance of the intersection (default: true).\r\n     */\r\n    public get attenuateIntersectionDistance() {\r\n        return this._attenuateIntersectionDistance;\r\n    }\r\n\r\n    public set attenuateIntersectionDistance(attenuate: boolean) {\r\n        if (this._attenuateIntersectionDistance === attenuate) {\r\n            return;\r\n        }\r\n        this._attenuateIntersectionDistance = attenuate;\r\n        this._updateEffectDefines();\r\n    }\r\n\r\n    @serialize(\"attenuateFacingCamera\")\r\n    private _attenuateFacingCamera = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the reflections should be attenuated when the reflection ray is facing the camera (the view direction) (default: false).\r\n     */\r\n    public get attenuateFacingCamera() {\r\n        return this._attenuateFacingCamera;\r\n    }\r\n\r\n    public set attenuateFacingCamera(attenuate: boolean) {\r\n        if (this._attenuateFacingCamera === attenuate) {\r\n            return;\r\n        }\r\n        this._attenuateFacingCamera = attenuate;\r\n        this._updateEffectDefines();\r\n    }\r\n\r\n    @serialize(\"attenuateBackfaceReflection\")\r\n    private _attenuateBackfaceReflection = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the backface reflections should be attenuated (default: false).\r\n     */\r\n    public get attenuateBackfaceReflection() {\r\n        return this._attenuateBackfaceReflection;\r\n    }\r\n\r\n    public set attenuateBackfaceReflection(attenuate: boolean) {\r\n        if (this._attenuateBackfaceReflection === attenuate) {\r\n            return;\r\n        }\r\n        this._attenuateBackfaceReflection = attenuate;\r\n        this._updateEffectDefines();\r\n    }\r\n\r\n    @serialize(\"clipToFrustum\")\r\n    private _clipToFrustum = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the ray should be clipped to the frustum (default: true).\r\n     * You can try to set this parameter to false to save some performances: it may produce some artefacts in some cases, but generally they won't really be visible\r\n     */\r\n    public get clipToFrustum() {\r\n        return this._clipToFrustum;\r\n    }\r\n\r\n    public set clipToFrustum(clip: boolean) {\r\n        if (this._clipToFrustum === clip) {\r\n            return;\r\n        }\r\n        this._clipToFrustum = clip;\r\n        this._updateEffectDefines();\r\n    }\r\n\r\n    @serialize(\"enableAutomaticThicknessComputation\")\r\n    private _enableAutomaticThicknessComputation: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if geometry thickness should be computed automatically (default: false).\r\n     * When enabled, a depth renderer is created which will render the back faces of the scene to a depth texture (meaning additional work for the GPU).\r\n     * In that mode, the \"thickness\" property is still used as an offset to compute the ray intersection, but you can typically use a much lower\r\n     * value than when enableAutomaticThicknessComputation is false (it's even possible to use a value of 0 when using low values for \"step\")\r\n     * Note that for performance reasons, this option will only apply to the first camera to which the the rendering pipeline is attached!\r\n     */\r\n    public get enableAutomaticThicknessComputation(): boolean {\r\n        return this._enableAutomaticThicknessComputation;\r\n    }\r\n\r\n    public set enableAutomaticThicknessComputation(automatic: boolean) {\r\n        if (this._enableAutomaticThicknessComputation === automatic) {\r\n            return;\r\n        }\r\n\r\n        this._enableAutomaticThicknessComputation = automatic;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Gets the depth renderer used to render the back faces of the scene to a depth texture.\r\n     */\r\n    public get backfaceDepthRenderer(): Nullable<DepthRenderer> {\r\n        return this._depthRenderer;\r\n    }\r\n\r\n    @serialize(\"backfaceDepthTextureSizeFactor\")\r\n    private _backfaceDepthTextureSizeFactor = 1;\r\n\r\n    /**\r\n     * Gets or sets the size factor used to create the backface depth texture, used only if enableAutomaticThicknessComputation = true (default: 1).\r\n     * This factor is used as a divisor of the full screen size (so, 2 means that the backface depth texture will be created at half the screen size, meaning better performances).\r\n     * Note that you will get rendering artefacts when using a value different from 1: it's a tradeoff between image quality and performances.\r\n     */\r\n    public get backfaceDepthTextureSizeFactor() {\r\n        return this._backfaceDepthTextureSizeFactor;\r\n    }\r\n\r\n    public set backfaceDepthTextureSizeFactor(factor: number) {\r\n        if (this._backfaceDepthTextureSizeFactor === factor) {\r\n            return;\r\n        }\r\n\r\n        this._backfaceDepthTextureSizeFactor = factor;\r\n        this._resizeDepthRenderer();\r\n    }\r\n\r\n    @serialize(\"isEnabled\")\r\n    private _isEnabled = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the effect is enabled (default: true).\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n\r\n        if (!value) {\r\n            if (this._cameras !== null) {\r\n                this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\r\n                this._cameras = this._camerasToBeAttached.slice();\r\n            }\r\n        } else if (value) {\r\n            if (!this._isDirty) {\r\n                if (this._cameras !== null) {\r\n                    this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\r\n                }\r\n            } else {\r\n                this._buildPipeline();\r\n            }\r\n        }\r\n    }\r\n\r\n    @serialize(\"debug\")\r\n    private _debug = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the effect should be rendered in debug mode (default: false).\r\n     * In this mode, colors have this meaning:\r\n     *   - blue: the ray hit the max distance (we reached maxDistance)\r\n     *   - red: the ray ran out of steps (we reached maxSteps)\r\n     *   - yellow: the ray went off screen\r\n     *   - green: the ray hit a surface. The brightness of the green color is proportional to the distance between the ray origin and the intersection point: A brighter green means more computation than a darker green.\r\n     * In the first 3 cases, the final color is calculated by mixing the skybox color with the pixel color (if environmentTexture is defined), otherwise the pixel color is not modified\r\n     * You should try to get as few blue/red/yellow pixels as possible, as this means that the ray has gone further than if it had hit a surface.\r\n     */\r\n    public get debug(): boolean {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(value: boolean) {\r\n        if (this._debug === value) {\r\n            return;\r\n        }\r\n\r\n        this._debug = value;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    private _forceGeometryBuffer: boolean = false;\r\n    private get _geometryBufferRenderer(): Nullable<GeometryBufferRenderer> {\r\n        if (!this._forceGeometryBuffer) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.geometryBufferRenderer;\r\n    }\r\n\r\n    private get _prePassRenderer(): Nullable<PrePassRenderer> {\r\n        if (this._forceGeometryBuffer) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.prePassRenderer;\r\n    }\r\n\r\n    private _scene: Scene;\r\n    private _isDirty = false;\r\n    private _camerasToBeAttached: Array<Camera> = [];\r\n    private _textureType: number;\r\n    private _ssrPostProcess: Nullable<PostProcess>;\r\n    private _blurPostProcessX: Nullable<PostProcess>;\r\n    private _blurPostProcessY: Nullable<PostProcess>;\r\n    private _blurCombinerPostProcess: Nullable<PostProcess>;\r\n    private _depthRenderer: Nullable<DepthRenderer>;\r\n    private _depthRendererCamera: Nullable<Camera>;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Constructor of the SSR rendering pipeline\r\n     * @param name The rendering pipeline name\r\n     * @param scene The scene linked to this pipeline\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to (default: scene.cameras)\r\n     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer (default: false)\r\n     * @param textureType The texture type used by the different post processes created by SSR (default: Constants.TEXTURETYPE_UNSIGNED_BYTE)\r\n     */\r\n    constructor(name: string, scene: Scene, cameras?: Camera[], forceGeometryBuffer = false, textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._cameras = cameras || scene.cameras;\r\n        this._cameras = this._cameras.slice();\r\n        this._camerasToBeAttached = this._cameras.slice();\r\n\r\n        this._scene = scene;\r\n        this._textureType = textureType;\r\n        this._forceGeometryBuffer = forceGeometryBuffer;\r\n\r\n        if (!this.isSupported) {\r\n            Logger.Error(\"The current engine does not support SSR.\");\r\n            return;\r\n        }\r\n\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n\r\n        if (this._forceGeometryBuffer) {\r\n            const geometryBufferRenderer = scene.enableGeometryBufferRenderer();\r\n            if (geometryBufferRenderer) {\r\n                geometryBufferRenderer.enableReflectivity = true;\r\n            }\r\n        } else {\r\n            const prePassRenderer = scene.enablePrePassRenderer();\r\n            prePassRenderer?.markAsDirty();\r\n        }\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSRRenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"SSRRenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Adds a camera to the pipeline\r\n     * @param camera the camera to be added\r\n     */\r\n    public addCamera(camera: Camera): void {\r\n        this._camerasToBeAttached.push(camera);\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Removes a camera from the pipeline\r\n     * @param camera the camera to remove\r\n     */\r\n    public removeCamera(camera: Camera): void {\r\n        const index = this._camerasToBeAttached.indexOf(camera);\r\n        this._camerasToBeAttached.splice(index, 1);\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableGeometryBufferRenderer\r\n     */\r\n    public dispose(disableGeometryBufferRenderer: boolean = false): void {\r\n        this._disposeDepthRenderer();\r\n        this._disposePostProcesses();\r\n\r\n        if (disableGeometryBufferRenderer) {\r\n            this._scene.disableGeometryBufferRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _getTextureSize() {\r\n        const engine = this._scene.getEngine();\r\n        const geometryBufferRenderer = this._geometryBufferRenderer;\r\n        const prePassRenderer = this._prePassRenderer;\r\n\r\n        let textureSize: ISize = { width: engine.getRenderWidth(), height: engine.getRenderHeight() };\r\n\r\n        if (geometryBufferRenderer) {\r\n            textureSize = geometryBufferRenderer.getGBuffer().textures[0].getSize();\r\n        } else if (prePassRenderer) {\r\n            const depthIndex = prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE);\r\n            const renderTarget = prePassRenderer.getRenderTarget();\r\n\r\n            if (renderTarget && renderTarget.textures) {\r\n                textureSize = renderTarget.textures[depthIndex].getSize();\r\n            }\r\n        }\r\n\r\n        return textureSize;\r\n    }\r\n\r\n    private _updateEffectDefines(): void {\r\n        const defines: string[] = [];\r\n\r\n        if (this._geometryBufferRenderer || this._prePassRenderer) {\r\n            defines.push(\"#define SSR_SUPPORTED\");\r\n        }\r\n        if (this._enableSmoothReflections) {\r\n            defines.push(\"#define SSRAYTRACE_ENABLE_REFINEMENT\");\r\n        }\r\n        if (this._scene.useRightHandedSystem) {\r\n            defines.push(\"#define SSRAYTRACE_RIGHT_HANDED_SCENE\");\r\n        }\r\n        if (this._environmentTexture) {\r\n            defines.push(\"#define SSR_USE_ENVIRONMENT_CUBE\");\r\n            if (this._environmentTexture.boundingBoxSize) {\r\n                defines.push(\"#define SSR_USE_LOCAL_REFLECTIONMAP_CUBIC\");\r\n            }\r\n        }\r\n        if (this._environmentTextureIsProbe) {\r\n            defines.push(\"#define SSR_INVERTCUBICMAP\");\r\n        }\r\n        if (this._enableAutomaticThicknessComputation) {\r\n            defines.push(\"#define SSRAYTRACE_USE_BACK_DEPTHBUFFER\");\r\n        }\r\n        if (this._attenuateScreenBorders) {\r\n            defines.push(\"#define SSR_ATTENUATE_SCREEN_BORDERS\");\r\n        }\r\n        if (this._attenuateIntersectionDistance) {\r\n            defines.push(\"#define SSR_ATTENUATE_INTERSECTION_DISTANCE\");\r\n        }\r\n        if (this._attenuateFacingCamera) {\r\n            defines.push(\"#define SSR_ATTENUATE_FACING_CAMERA\");\r\n        }\r\n        if (this._attenuateBackfaceReflection) {\r\n            defines.push(\"#define SSR_ATTENUATE_BACKFACE_REFLECTION\");\r\n        }\r\n        if (this._clipToFrustum) {\r\n            defines.push(\"#define SSRAYTRACE_CLIP_TO_FRUSTUM\");\r\n        }\r\n        if (this._blurDispersionStrength > 0) {\r\n            defines.push(\"#define SSR_USE_BLUR\");\r\n        }\r\n        if (this._debug) {\r\n            defines.push(\"#define SSRAYTRACE_DEBUG\");\r\n        }\r\n\r\n        this._ssrPostProcess?.updateEffect(defines.join(\"\\n\"));\r\n    }\r\n\r\n    private _buildPipeline() {\r\n        if (!this._isEnabled) {\r\n            this._isDirty = true;\r\n            return;\r\n        }\r\n\r\n        this._isDirty = false;\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._disposeDepthRenderer();\r\n        this._disposePostProcesses();\r\n        if (this._cameras !== null) {\r\n            this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\r\n            // get back cameras to be used to reattach pipeline\r\n            this._cameras = this._camerasToBeAttached.slice();\r\n        }\r\n        this._reset();\r\n\r\n        if (this._enableAutomaticThicknessComputation) {\r\n            const camera = this._cameras?.[0];\r\n\r\n            if (camera) {\r\n                this._depthRendererCamera = camera;\r\n                this._depthRenderer = new DepthRenderer(this._scene, undefined, undefined, undefined, Constants.TEXTURE_NEAREST_SAMPLINGMODE, true, \"SSRBackDepth\");\r\n                this._depthRenderer.clearColor.r = 1e8; // put a big value because we use the storeCameraSpaceZ mode\r\n                this._depthRenderer.reverseCulling = true; // we generate depth for the back faces\r\n                this._depthRenderer.getDepthMap().noPrePassRenderer = true; // we don't want the prepass renderer to attach to our depth buffer!\r\n\r\n                this._resizeDepthRenderer();\r\n\r\n                camera.customRenderTargets.push(this._depthRenderer.getDepthMap());\r\n            }\r\n        }\r\n\r\n        this._createSSRPostProcess();\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                engine,\r\n                this.SSRRenderEffect,\r\n                () => {\r\n                    return this._ssrPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        if (this._blurDispersionStrength > 0) {\r\n            this._createBlurAndCombinerPostProcesses();\r\n            this.addEffect(\r\n                new PostProcessRenderEffect(\r\n                    engine,\r\n                    this.SSRBlurRenderEffect,\r\n                    () => {\r\n                        return [this._blurPostProcessX!, this._blurPostProcessY!];\r\n                    },\r\n                    true\r\n                )\r\n            );\r\n            this.addEffect(\r\n                new PostProcessRenderEffect(\r\n                    engine,\r\n                    this.SSRCombineRenderEffect,\r\n                    () => {\r\n                        return this._blurCombinerPostProcess;\r\n                    },\r\n                    true\r\n                )\r\n            );\r\n        }\r\n\r\n        if (this._cameras !== null) {\r\n            this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\r\n        }\r\n    }\r\n\r\n    private _resizeDepthRenderer() {\r\n        if (!this._depthRenderer) {\r\n            return;\r\n        }\r\n\r\n        const textureSize = this._getTextureSize();\r\n        const depthRendererSize = this._depthRenderer.getDepthMap().getSize();\r\n\r\n        const width = Math.floor(textureSize.width / this._backfaceDepthTextureSizeFactor);\r\n        const height = Math.floor(textureSize.height / this._backfaceDepthTextureSizeFactor);\r\n\r\n        if (depthRendererSize.width !== width || depthRendererSize.height !== height) {\r\n            this._depthRenderer.getDepthMap().resize({ width, height });\r\n        }\r\n    }\r\n\r\n    private _disposeDepthRenderer() {\r\n        if (this._depthRenderer) {\r\n            if (this._depthRendererCamera) {\r\n                const idx = this._depthRendererCamera.customRenderTargets.indexOf(this._depthRenderer.getDepthMap()) ?? -1;\r\n                if (idx !== -1) {\r\n                    this._depthRendererCamera.customRenderTargets.splice(idx, 1);\r\n                }\r\n            }\r\n            this._depthRendererCamera = null;\r\n            this._depthRenderer.getDepthMap().dispose();\r\n        }\r\n        this._depthRenderer = null;\r\n    }\r\n\r\n    private _disposePostProcesses(): void {\r\n        for (let i = 0; i < this._cameras.length; i++) {\r\n            const camera = this._cameras[i];\r\n\r\n            this._ssrPostProcess?.dispose(camera);\r\n            this._blurPostProcessX?.dispose(camera);\r\n            this._blurPostProcessY?.dispose(camera);\r\n            this._blurCombinerPostProcess?.dispose(camera);\r\n        }\r\n\r\n        this._ssrPostProcess = null;\r\n        this._blurPostProcessX = null;\r\n        this._blurPostProcessY = null;\r\n        this._blurCombinerPostProcess = null;\r\n    }\r\n\r\n    private _createSSRPostProcess(): void {\r\n        this._ssrPostProcess = new PostProcess(\r\n            \"ssr\",\r\n            \"screenSpaceReflection2\",\r\n            [\r\n                \"projection\",\r\n                \"invProjectionMatrix\",\r\n                \"view\",\r\n                \"invView\",\r\n                \"thickness\",\r\n                \"reflectionSpecularFalloffExponent\",\r\n                \"strength\",\r\n                \"stepSize\",\r\n                \"maxSteps\",\r\n                \"roughnessFactor\",\r\n                \"projectionPixel\",\r\n                \"nearPlaneZ\",\r\n                \"maxDistance\",\r\n                \"selfCollisionNumSkip\",\r\n                \"vReflectionPosition\",\r\n                \"vReflectionSize\",\r\n                \"backSizeFactor\",\r\n            ],\r\n            [\"textureSampler\", \"normalSampler\", \"reflectivitySampler\", \"depthSampler\", \"envCubeSampler\", \"backDepthSampler\"],\r\n            1.0,\r\n            null,\r\n            this._textureType,\r\n            this._scene.getEngine(),\r\n            false,\r\n            \"\",\r\n            this._textureType\r\n        );\r\n\r\n        this._updateEffectDefines();\r\n\r\n        this._ssrPostProcess.onApply = (effect: Effect) => {\r\n            this._resizeDepthRenderer();\r\n\r\n            const geometryBufferRenderer = this._geometryBufferRenderer;\r\n            const prePassRenderer = this._prePassRenderer;\r\n\r\n            if (!prePassRenderer && !geometryBufferRenderer) {\r\n                return;\r\n            }\r\n\r\n            if (geometryBufferRenderer) {\r\n                const roughnessIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE);\r\n\r\n                effect.setTexture(\"normalSampler\", geometryBufferRenderer.getGBuffer().textures[1]);\r\n                effect.setTexture(\"reflectivitySampler\", geometryBufferRenderer.getGBuffer().textures[roughnessIndex]);\r\n                effect.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[0]);\r\n            } else if (prePassRenderer) {\r\n                const depthIndex = prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE);\r\n                const roughnessIndex = prePassRenderer.getIndex(Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE);\r\n                const normalIndex = prePassRenderer.getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE);\r\n\r\n                effect.setTexture(\"normalSampler\", prePassRenderer.getRenderTarget().textures[normalIndex]);\r\n                effect.setTexture(\"depthSampler\", prePassRenderer.getRenderTarget().textures[depthIndex]);\r\n                effect.setTexture(\"reflectivitySampler\", prePassRenderer.getRenderTarget().textures[roughnessIndex]);\r\n            }\r\n\r\n            if (this._enableAutomaticThicknessComputation && this._depthRenderer) {\r\n                effect.setTexture(\"backDepthSampler\", this._depthRenderer.getDepthMap());\r\n                effect.setFloat(\"backSizeFactor\", this._backfaceDepthTextureSizeFactor);\r\n            }\r\n\r\n            const camera = this._scene.activeCamera;\r\n            if (!camera) {\r\n                return;\r\n            }\r\n\r\n            const viewMatrix = camera.getViewMatrix(true);\r\n            const projectionMatrix = camera.getProjectionMatrix(true);\r\n\r\n            projectionMatrix.invertToRef(TmpVectors.Matrix[0]);\r\n            viewMatrix.invertToRef(TmpVectors.Matrix[1]);\r\n\r\n            effect.setMatrix(\"projection\", projectionMatrix);\r\n            effect.setMatrix(\"view\", viewMatrix);\r\n            effect.setMatrix(\"invView\", TmpVectors.Matrix[1]);\r\n            effect.setMatrix(\"invProjectionMatrix\", TmpVectors.Matrix[0]);\r\n            effect.setFloat(\"thickness\", this.thickness);\r\n            effect.setFloat(\"reflectionSpecularFalloffExponent\", this.reflectionSpecularFalloffExponent);\r\n            effect.setFloat(\"strength\", this.strength);\r\n            effect.setFloat(\"stepSize\", this.step);\r\n            effect.setFloat(\"maxSteps\", this.maxSteps);\r\n            effect.setFloat(\"roughnessFactor\", this.roughnessFactor);\r\n            effect.setFloat(\"nearPlaneZ\", camera.minZ);\r\n            effect.setFloat(\"maxDistance\", this.maxDistance);\r\n            effect.setFloat(\"selfCollisionNumSkip\", this.selfCollisionNumSkip);\r\n\r\n            const textureSize = this._getTextureSize();\r\n\r\n            Matrix.ScalingToRef(textureSize!.width, textureSize!.height, 1, TmpVectors.Matrix[2]);\r\n\r\n            projectionMatrix.multiplyToRef(this._scene.getEngine().isWebGPU ? trsWebGPU : trs, TmpVectors.Matrix[3]);\r\n\r\n            TmpVectors.Matrix[3].multiplyToRef(TmpVectors.Matrix[2], TmpVectors.Matrix[4]);\r\n\r\n            effect.setMatrix(\"projectionPixel\", TmpVectors.Matrix[4]);\r\n\r\n            if (this._environmentTexture) {\r\n                effect.setTexture(\"envCubeSampler\", this._environmentTexture);\r\n\r\n                if (this._environmentTexture.boundingBoxSize) {\r\n                    effect.setVector3(\"vReflectionPosition\", this._environmentTexture.boundingBoxPosition);\r\n                    effect.setVector3(\"vReflectionSize\", this._environmentTexture.boundingBoxSize);\r\n                }\r\n            }\r\n        };\r\n        this._ssrPostProcess.samples = this.samples;\r\n\r\n        if (!this._forceGeometryBuffer) {\r\n            this._ssrPostProcess._prePassEffectConfiguration = new ScreenSpaceReflections2Configuration();\r\n        }\r\n    }\r\n\r\n    private _createBlurAndCombinerPostProcesses() {\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._blurPostProcessX = new PostProcess(\r\n            \"SSRblurX\",\r\n            \"screenSpaceReflection2Blur\",\r\n            [\"blurQuality\", \"texelOffsetScale\"],\r\n            [\"textureSampler\"],\r\n            1,\r\n            null,\r\n            Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            false,\r\n            \"\",\r\n            this._textureType\r\n        );\r\n        this._blurPostProcessX.autoClear = false;\r\n\r\n        this._blurPostProcessX.onApplyObservable.add((effect) => {\r\n            let width = this._scene.getEngine().getRenderWidth();\r\n\r\n            if (this._prePassRenderer) {\r\n                const colorIndex = this._prePassRenderer.getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE);\r\n                const renderTarget = this._prePassRenderer.getRenderTarget();\r\n\r\n                if (renderTarget && renderTarget.textures) {\r\n                    width = renderTarget.textures[colorIndex].getSize().width;\r\n                }\r\n            } else {\r\n                width = this._ssrPostProcess?.inputTexture.width ?? width;\r\n            }\r\n\r\n            effect.setFloat(\"blurQuality\", this.blurQuality);\r\n            effect.setFloat2(\"texelOffsetScale\", this._blurDispersionStrength / width, 0);\r\n        });\r\n\r\n        this._blurPostProcessY = new PostProcess(\r\n            \"SSRblurY\",\r\n            \"screenSpaceReflection2Blur\",\r\n            [\"blurQuality\", \"texelOffsetScale\"],\r\n            [\"textureSampler\"],\r\n            1,\r\n            null,\r\n            Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            false,\r\n            \"\",\r\n            this._textureType\r\n        );\r\n        this._blurPostProcessY.autoClear = false;\r\n\r\n        this._blurPostProcessY.onApplyObservable.add((effect) => {\r\n            let height = this._scene.getEngine().getRenderHeight();\r\n\r\n            if (this._prePassRenderer) {\r\n                const colorIndex = this._prePassRenderer.getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE);\r\n                const renderTarget = this._prePassRenderer.getRenderTarget();\r\n\r\n                if (renderTarget && renderTarget.textures) {\r\n                    height = renderTarget.textures[colorIndex].getSize().height;\r\n                }\r\n            } else {\r\n                height = this._ssrPostProcess?.inputTexture.height ?? height;\r\n            }\r\n\r\n            effect.setFloat(\"blurQuality\", this.blurQuality);\r\n            effect.setFloat2(\"texelOffsetScale\", 0, this._blurDispersionStrength / height);\r\n        });\r\n\r\n        this._blurCombinerPostProcess = new PostProcess(\r\n            \"SSRblurCombiner\",\r\n            \"screenSpaceReflection2BlurCombiner\",\r\n            [\"strength\", \"reflectionSpecularFalloffExponent\"],\r\n            [\"textureSampler\", \"mainSampler\", \"reflectivitySampler\"],\r\n            1,\r\n            null,\r\n            Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            engine,\r\n            false,\r\n            \"\",\r\n            this._textureType\r\n        );\r\n        this._blurCombinerPostProcess.autoClear = false;\r\n\r\n        this._blurCombinerPostProcess.onApplyObservable.add((effect) => {\r\n            const geometryBufferRenderer = this._geometryBufferRenderer;\r\n            const prePassRenderer = this._prePassRenderer;\r\n\r\n            if (!prePassRenderer && !geometryBufferRenderer) {\r\n                return;\r\n            }\r\n\r\n            if (prePassRenderer) {\r\n                const colorIndex = prePassRenderer.getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE);\r\n                const renderTarget = prePassRenderer.getRenderTarget();\r\n\r\n                if (renderTarget && renderTarget.textures) {\r\n                    effect.setTexture(\"mainSampler\", renderTarget.textures[colorIndex]);\r\n                }\r\n            } else {\r\n                effect._bindTexture(\"mainSampler\", this._ssrPostProcess!.inputTexture.texture);\r\n            }\r\n\r\n            if (geometryBufferRenderer) {\r\n                const roughnessIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE);\r\n                effect.setTexture(\"reflectivitySampler\", geometryBufferRenderer.getGBuffer().textures[roughnessIndex]);\r\n            } else if (prePassRenderer) {\r\n                const roughnessIndex = prePassRenderer.getIndex(Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE);\r\n                effect.setTexture(\"reflectivitySampler\", prePassRenderer.getRenderTarget().textures[roughnessIndex]);\r\n            }\r\n\r\n            effect.setFloat(\"strength\", this.strength);\r\n            effect.setFloat(\"reflectionSpecularFalloffExponent\", this.reflectionSpecularFalloffExponent);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the rendering pipeline (Used when exporting)\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"SSRRenderingPipeline\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse the serialized pipeline\r\n     * @param source Source pipeline.\r\n     * @param scene The scene to load the pipeline to.\r\n     * @param rootUrl The URL of the serialized pipeline.\r\n     * @returns An instantiated pipeline from the serialized object.\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SSRRenderingPipeline {\r\n        return SerializationHelper.Parse(() => new SSRRenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SSRRenderingPipeline\", SSRRenderingPipeline);\r\n"]}